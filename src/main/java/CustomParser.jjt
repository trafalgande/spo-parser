options {
  MULTI=true;
  NODE_DEFAULT_VOID=true;
}

PARSER_BEGIN(CustomParser)

public class CustomParser {
    public static void main(String[] args) {
       CustomParser customParser = new CustomParser(System.in(args));
       try {
           ASTStart root = customParser.Start();
           root.dump("");
           JsonDTO jsonDTO = new JsonDTO();
           com.google.gson.Gson gson = new com.google.gson.Gson();
           for(int i = 0; i < root.jjtGetNumChildren(); i++) {
               Node current = root.jjtGetChild(i);
                   if (current.toString().contains(":")) {
                       String[] split = current.toString().split(":");
                       switch (split[0]) {
                              case "Command" : {
                                  jsonDTO.setCmd(split[1].trim());
                                  break;
                              }
                              case "Param" : {
                                  jsonDTO.setParam(split[1].trim());
                                  break;
                              }
                              case "Path" : {
                                  jsonDTO.setPath(split[1].trim());
                                  break;
                              }
                              case "New Element" : {
                                  jsonDTO.setNelem(split[1].trim());
                                  break;
                              }
                          }
                   }
                   if (current.jjtGetNumChildren() > 0) {
                   for(int j = 0; j < current.jjtGetNumChildren(); j++) {
                       Node subCurrent = current.jjtGetChild(j);
                       if (subCurrent.jjtGetNumChildren() > 0) {
                           for(int k = 0; k < subCurrent.jjtGetNumChildren(); k++) {
                               Node subSubCurrent = subCurrent.jjtGetChild(k);
                                if (subSubCurrent.toString().contains(":")) {
                                  String[] split = subSubCurrent.toString().split(":");
                                  switch (split[0]) {
                                      case "Sign" : {
                                          jsonDTO.setSign(split[1].trim());
                                          break;
                                      }
                                      case "Right Item" : {
                                          jsonDTO.setRight(split[1].trim());
                                          break;
                                      }
                                  }
                              }
                           }
                       }
                   }
               }
           }
           String json = gson.toJson(jsonDTO);
          System.out.println(json);
       } catch (Exception e) {
         System.out.println(e.getMessage());
         e.printStackTrace();
       }
    }
}


PARSER_END(CustomParser)

SKIP : { " " | "\t" }

TOKEN : { <EOL : "\n" | "\r" | "\r\n" > }

TOKEN : {
    <CMD: "create" | "read" | "update" | "delete" >
        | <DIR_OR_NODE: "dir" | "node"  >

    | <#LETTER: ["a"-"z", "A"-"Z"] >
    | <#DOT : "." >
    | <WORD: (<LETTER>)+ >

    | <PATH: (<WORD>(<DOT>)?)+ | <DOT> >

    | <#eq: "=" >
    | <#gt: ">" >
    | <#lt: "<" >
    | <COMPARE: <eq> | <gt> | <lt> >

    | <#and: " & " >
    | <#or: " | " >
    | <AND_OR: <and> | <or> >
}

ASTStart Start() #Start : {}
{
  Input() <EOL>
  { return jjtThis; }
}

void Input() : {}
{
    Command() ( DirOrNode() )? Path()( NewElement() )?( Condition() )?
}

void Path() #Path : {Token t;}
{
    t=<PATH> {jjtThis.setName(t.image);}
}

void DirOrNode() #DirOrNode : {Token t;}
{
    t=<DIR_OR_NODE> {jjtThis.setName(t.image);}
}

void Command() #Command : {Token t;}
{
    t=<CMD> {jjtThis.setName(t.image);}
}

void Condition() #Condition : {}
{
    "[" ( SubCondition() (AndOr() SubCondition())? )+ "]"
}

void SubCondition() #SubCondition : {}
{
    <WORD> CompareSign() ConditionItem()
}


void ConditionItem() #ConditionItem : {Token t;}
{
    t=<WORD> {jjtThis.setName(t.image);}
}

void CompareSign() #CompareSign : {Token t;}
{
    t=<COMPARE> {jjtThis.setName(t.image);}
}

void AndOr() #AndOr : {Token t;}
{
    t=<AND_OR> {jjtThis.setName(t.image);}
}

void NewElement() #NewElement : {Token t;}
{
    t="!"<WORD> {jjtThis.setName(t.next.image);}
}

