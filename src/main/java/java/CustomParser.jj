/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /home/losha/IdeaProjects/spo-parser/src/main/java/java/CustomParser.jj */
/*@egen*/options {
             
                         
}

PARSER_BEGIN(CustomParser)

public class CustomParser/*@bgen(jjtree)*/implements CustomParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCustomParserState jjtree = new JJTCustomParserState();

/*@egen*/
    public static void main(String[] args) {
       CustomParser customParser = new CustomParser(System.in);
       try {
           ASTStart root = customParser.Start();
           root.dump("");
           JsonDTO jsonDTO = new JsonDTO();
           com.google.gson.Gson gson = new com.google.gson.Gson();
           for(int i = 0; i < root.jjtGetNumChildren(); i++) {
               Node current = root.jjtGetChild(i);
                   if (current.toString().contains(":")) {
                       String[] split = current.toString().split(":");
                       switch (split[0]) {
                              case "Command" : {
                                  jsonDTO.setCmd(split[1].trim());
                                  break;
                              }
                              case "Param" : {
                                  jsonDTO.setParam(split[1].trim());
                                  break;
                              }
                              case "Path" : {
                                  jsonDTO.setPath(split[1].trim());
                                  break;
                              }
                              case "New Element" : {
                                  jsonDTO.setNelem(split[1].trim());
                                  break;
                              }
                          }
                   }
                   if (current.jjtGetNumChildren() > 0) {
                   for(int j = 0; j < current.jjtGetNumChildren(); j++) {
                       Node subCurrent = current.jjtGetChild(j);
                       if (subCurrent.jjtGetNumChildren() > 0) {
                           for(int k = 0; k < subCurrent.jjtGetNumChildren(); k++) {
                               Node subSubCurrent = subCurrent.jjtGetChild(k);
                                if (subSubCurrent.toString().contains(":")) {
                                  String[] split = subSubCurrent.toString().split(":");
                                  switch (split[0]) {
                                      case "Sign" : {
                                          jsonDTO.setSign(split[1].trim());
                                          break;
                                      }
                                      case "Right Item" : {
                                          jsonDTO.setRight(split[1].trim());
                                          break;
                                      }
                                  }
                              }
                           }
                       }
                   }
               }
           }
           String json = gson.toJson(jsonDTO);
          System.out.println(json);
       } catch (Exception e) {
         System.out.println(e.getMessage());
         e.printStackTrace();
       }
    }
}


PARSER_END(CustomParser)

SKIP : { " " | "\t" }

TOKEN : { <EOL : "\n" | "\r" | "\r\n" > }

TOKEN : {
    <CMD: "create" | "read" | "update" | "delete" >
        | <DIR_OR_NODE: "dir" | "node"  >

    | <#LETTER: ["a"-"z", "A"-"Z"] >
    | <#DOT : "." >
    | <WORD: (<LETTER>)+ >

    | <PATH: (<WORD>(<DOT>)?)+ | <DOT> >

    | <#eq: "=" >
    | <#gt: ">" >
    | <#lt: "<" >
    | <COMPARE: <eq> | <gt> | <lt> >

    | <#and: " & " >
    | <#or: " | " >
    | <AND_OR: <and> | <or> >
}

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Input() <EOL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Input() : {}
{
    Command() ( DirOrNode() )? Path()( NewElement() )?( Condition() )?
}

void Path()       : {/*@bgen(jjtree) Path */
                     ASTPath jjtn000 = new ASTPath(JJTPATH);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Path */
    try {
/*@egen*/
    t=<PATH>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DirOrNode()            : {/*@bgen(jjtree) DirOrNode */
                               ASTDirOrNode jjtn000 = new ASTDirOrNode(JJTDIRORNODE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DirOrNode */
    try {
/*@egen*/
    t=<DIR_OR_NODE>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Command()          : {/*@bgen(jjtree) Command */
                           ASTCommand jjtn000 = new ASTCommand(JJTCOMMAND);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Command */
    try {
/*@egen*/
    t=<CMD>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Condition()            : {/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    "[" ( SubCondition() (AndOr() SubCondition())? )+ "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SubCondition()               : {/*@bgen(jjtree) SubCondition */
  ASTSubCondition jjtn000 = new ASTSubCondition(JJTSUBCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubCondition */
    try {
/*@egen*/
    <WORD> CompareSign() ConditionItem()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void ConditionItem()                : {/*@bgen(jjtree) ConditionItem */
                                       ASTConditionItem jjtn000 = new ASTConditionItem(JJTCONDITIONITEM);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ConditionItem */
    try {
/*@egen*/
    t=<WORD>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CompareSign()              : {/*@bgen(jjtree) CompareSign */
                                   ASTCompareSign jjtn000 = new ASTCompareSign(JJTCOMPARESIGN);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CompareSign */
    try {
/*@egen*/
    t=<COMPARE>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AndOr()        : {/*@bgen(jjtree) AndOr */
                       ASTAndOr jjtn000 = new ASTAndOr(JJTANDOR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AndOr */
    try {
/*@egen*/
    t=<AND_OR>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NewElement()             : {/*@bgen(jjtree) NewElement */
                                 ASTNewElement jjtn000 = new ASTNewElement(JJTNEWELEMENT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NewElement */
    try {
/*@egen*/
    t="!"<WORD>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.setName(t.next.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

