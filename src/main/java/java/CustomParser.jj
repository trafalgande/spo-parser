/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /home/losha/IdeaProjects/spo-parser/src/main/java/java/CustomParser.jj */
/*@egen*/options {
             
                         
}

PARSER_BEGIN(CustomParser)

import java.io.FileNotFoundException;
import java.util.*;

public class CustomParser/*@bgen(jjtree)*/implements CustomParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCustomParserState jjtree = new JJTCustomParserState();

/*@egen*/
    public static void main(String[] args) {
       CustomParser customParser = null;
       if (args.length < 1) {
           customParser = new CustomParser(System.in);
       } else {
           try {
                customParser = new CustomParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
           } catch(FileNotFoundException e) {
                customParser = new CustomParser(System.in);
           }
       }
       try {
           ASTStart root = customParser.Start();
//           root.dump("");
           JsonDTO jsonDTO = new JsonDTO();
           ElementDTO elementDTO = null;
           List paths = new ArrayList();
           com.google.gson.Gson gson = new com.google.gson.Gson();
           for(int i = 0; i < root.jjtGetNumChildren(); i++) {
               String currentPath = "";
               Node current = root.jjtGetChild(i);
                   if (current.toString().contains(":")) {
                       String[] split = current.toString().split(":");
                       switch (split[0]) {
                              case "Command" : {
                                  jsonDTO.setCmd(split[1].trim());
                                  break;
                              }
                              case "Param" : {
                                  jsonDTO.setParam(split[1].trim());
                                  break;
                              }
                              case "Path" : {
                                  currentPath = split[1].trim().substring(1);
                                  break;
                              }
                              case "New element key" : {
                                  elementDTO = new ElementDTO();
                                  elementDTO.setElementKey(split[1].trim());
                                  break;
                              }
                              case "New element": {
                                  if (current.jjtGetChild(0).jjtGetNumChildren() > 0) {
                                      if (elementDTO == null) elementDTO = new ElementDTO();
                                      List values = new ArrayList();
                                      for (int h = 0; h < current.jjtGetNumChildren() ; h++) {
                                          ElementInitValuesDTO valuesDTO = new ElementInitValuesDTO();
                                          for(int g = 0; g < current.jjtGetChild(h).jjtGetNumChildren() ; g++) {
                                              Node elementLeaf = current.jjtGetChild(h).jjtGetChild(g);
                                               if (elementLeaf.toString().contains(":")) {
                                                   String[] split_ = elementLeaf.toString().split(":");
                                                   switch (split_[0]) {
                                                       case "key" : {
                                                           valuesDTO.setInit_value_key(split_[1].trim());
                                                           break;
                                                       }
                                                       case "value" : {
                                                           String utfval = split_[1].trim();
                                                           try {
                                                               Integer intval = Integer.parseInt(utfval);
                                                               valuesDTO.setInt_value(intval);
                                                           } catch (Exception e) {
                                                               valuesDTO.setUtf_value(utfval);
                                                           }
                                                       }
                                                   }
                                               }
                                            }
                                            values.add(valuesDTO);
                                      }

                                      elementDTO.setElement_init_values(values);
                                      elementDTO.setInit_values_n(values.size());
                                  }
                                  break;
                              }
                          }
                   }
                       ArrayList conds = null;
                       ArrayList operators = null;
                   if (current.jjtGetNumChildren() > 0) {
                       operators = new ArrayList();
                       conds = new ArrayList();
                       String and_or = "";
                   for(int j = 0; j < current.jjtGetNumChildren(); j++) {
                       Node subCurrent = current.jjtGetChild(j);
                         if ("and_or".equals(subCurrent.toString().split(":")[0])) {
                                                         and_or = subCurrent.toString().split(":")[1].trim();
                                                         operators.add("&&".equals(and_or) ? 1 : 0);
                                                  }
                       if (subCurrent.jjtGetNumChildren() > 0) {
                          SubCondDTO subCondDTO = new SubCondDTO();
                           for(int k = 0; k < subCurrent.jjtGetNumChildren(); k++) {
                               Node subSubCurrent = subCurrent.jjtGetChild(k);
                                if (subSubCurrent.toString().contains(":")) {
                                  String[] split = subSubCurrent.toString().split(":");
                                  switch (split[0]) {
                                     case "key" : {
                                         subCondDTO.setKey(split[1].trim());
                                         break;
                                      }
                                     case "value" : {
                                         String val = split[1].trim();
                                         try {
                                             int intval = Integer.parseInt(val);
                                             subCondDTO.setInt_value(intval);
                                         } catch (Exception e) {
                                             subCondDTO.setUtf_value(val);
                                         }
                                         break;
                                     }
                                     case "Sign": {
                                         subCondDTO.setSign(split[1].trim());
                                         break;
                                     }
                                     case "asterisk": {
                                         currentPath = split[1].trim();
                                         break;
                                     }
                                  }
                              }
                           }
                                conds.add(subCondDTO);
                       }
                   }
               }
                   if (!"".equals(currentPath)) {
                       switch (jsonDTO.getCmd()) {
                       case "delete": {
                         if (conds == null)
                             jsonDTO.append(new PathDTO(currentPath));
                         else if ("*".equals(currentPath))
                            jsonDTO.append(new PathDTO(currentPath));
                         else
                            jsonDTO.append(new PathDTO(currentPath, conds, operators, conds.size()));
                         break;
                       }
                       case "update":
                       case "create":   {
                           jsonDTO.append(new PathDTO(currentPath));
                            break;
                       }
                       case "read": {
                           if ((currentPath+".").equals("..")) {
                                   jsonDTO.setFrom_root(0);
                           } else
                            if (currentPath.contains(".")) {
                                for (String s : currentPath.split("\\."))
                                    jsonDTO.append(new PathDTO(s));
                              } else if (conds == null)
                                  jsonDTO.append(new PathDTO(currentPath));
                              else if ("*".equals(currentPath))
                                 jsonDTO.append(new PathDTO(currentPath));
                              else
                                 jsonDTO.append(new PathDTO(currentPath, conds, operators, conds.size()));
                              break;
                           }
                       }
                   }
       }
           jsonDTO.setNelem(elementDTO);
           jsonDTO.setPaths_n(jsonDTO.getPaths()!= null ? jsonDTO.getPaths().size() : null);
           String json = gson.toJson(jsonDTO);
           System.out.println(json);
       } catch (Exception e) {
           System.out.print("\t[-] Wrong input\n>\t");
//           System.out.println(e.getMessage());
       }

    }
}

PARSER_END(CustomParser)

SKIP : { " " | "\t" }

TOKEN : { <EOL : "\n" | "\r" | "\r\n" > }

TOKEN : {
    <CMD: "create" | "read" | "update" | "delete" >
    | <DIR_OR_NODE: "dir" | "node"  >

    | <QUOTE: "\'" | "\"">
    | <#LETTER: ["a"-"z", "A"-"Z"] >
    | <#DIGIT: ["0"-"9"] >
    | <#DOT : "." >
    | <WORD: (<LETTER>)+ | (<DIGIT>)+>
    | <PATH: <DOT><DOT> | <DOT> | ((<DOT> | <DOT><DOT>)<WORD>)+ >

    | <ASTERISK : "*" >
    | <#eq: "=" >
    | <#neq: "!=" >
    | <#gt: ">" >
    | <#lt: "<" >
    | <COMPARE: <eq> | <neq> | <gt> | <lt> >

    | <#and: "&&" >
    | <#or: "||" >
    | <AND_OR: <and> | <or> >
}

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Input() <EOL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Input() : {}
{
    Command() ( DirOrNode() )? "$"( FullPath() )+ ( NewElement() )? (("with value" | "with values") "[" ElementValues() "]")?
}

void FullPath()       :{/*@bgen(jjtree) Path */
                        ASTPath jjtn000 = new ASTPath(JJTPATH);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Path */
    try {
/*@egen*/
    t=<PATH>["[" SubCondition() [(AndOr() SubCondition())+ | "*"] "]"]/*@bgen(jjtree)*/
                                                                       {
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                       }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DirOrNode()            : {/*@bgen(jjtree) DirOrNode */
                               ASTDirOrNode jjtn000 = new ASTDirOrNode(JJTDIRORNODE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DirOrNode */
    try {
/*@egen*/
    t=<DIR_OR_NODE>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Command()          : {/*@bgen(jjtree) Command */
                           ASTCommand jjtn000 = new ASTCommand(JJTCOMMAND);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Command */
    try {
/*@egen*/
    t=<CMD>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Condition()            : {/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    SubCondition() [(AndOr() SubCondition())+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ElementValues()                : {/*@bgen(jjtree) ElementValues */
  ASTElementValues jjtn000 = new ASTElementValues(JJTELEMENTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElementValues */
    try {
/*@egen*/
    SubElementValue() [("," SubElementValue())+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SubElementValue()                  : {/*@bgen(jjtree) SubElementValue */
  ASTSubElementValue jjtn000 = new ASTSubElementValue(JJTSUBELEMENTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubElementValue */
    try {
/*@egen*/
    key() "==" val()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SubCondition()               : {/*@bgen(jjtree) SubCondition */
  ASTSubCondition jjtn000 = new ASTSubCondition(JJTSUBCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubCondition */
    try {
/*@egen*/
    (key() CompareSign() val()) | asterisk()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void key()      : {/*@bgen(jjtree) key */
                   ASTkey jjtn000 = new ASTkey(JJTKEY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) key */
    try {
/*@egen*/
    t=<WORD>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void val()      : {/*@bgen(jjtree) val */
                   ASTval jjtn000 = new ASTval(JJTVAL);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) val */
    try {
/*@egen*/
    t=<WORD>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void asterisk()           : {/*@bgen(jjtree) asterisk */
                             ASTasterisk jjtn000 = new ASTasterisk(JJTASTERISK);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) asterisk */
    try {
/*@egen*/
    t=<ASTERISK>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void CompareSign()              : {/*@bgen(jjtree) CompareSign */
                                   ASTCompareSign jjtn000 = new ASTCompareSign(JJTCOMPARESIGN);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CompareSign */
    try {
/*@egen*/
    t=<COMPARE>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AndOr()        : {/*@bgen(jjtree) AndOr */
                       ASTAndOr jjtn000 = new ASTAndOr(JJTANDOR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AndOr */
    try {
/*@egen*/
    t=<AND_OR>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NewElement()             : {/*@bgen(jjtree) NewElement */
                                 ASTNewElement jjtn000 = new ASTNewElement(JJTNEWELEMENT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NewElement */
    try {
/*@egen*/
    t="!"<WORD>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.setName(t.next.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

